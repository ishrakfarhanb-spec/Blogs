name: Publish Blog From Issue

on:
  issues:
    types: [opened, edited, labeled]

permissions:
  contents: write

jobs:
  publish:
    if: |
      contains(github.event.issue.labels.*.name, 'blog') &&
      (github.event.action == 'opened' || github.event.action == 'edited' || github.event.action == 'labeled')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Publish via github-script
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            function section(id){
              const re = new RegExp(`(?<=###\\s+${id}\\n)\\n*([\\s\\S]*?)(?=\\n###\\s+|$)`,`i`);
              const m = issue.body ? issue.body.match(re) : null;
              return m ? m[1].trim() : '';
            }

            const title = issue.title.replace(/^\[Blog\]\s*/i,'').trim();
            function slugify(s){ return s.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,''); }
            const slug = slugify(title || ('post-'+issue.number));

            const post = {
              title,
              date: section('Date'),
              author: section('Author'),
              category: section('Category'),
              tags: section('Tags').split(',').map(s=>s.trim()).filter(Boolean),
              image: section('Image URL') || 'assets/img/placeholder-wide.svg',
              imageAlt: section('Image Alt Text') || title,
              excerpt: section('Excerpt'),
              slug,
            };
            const body = section('Main Body');

            // Update assets/data/blogs.json
            async function getFile(path){
              try{
                const { data } = await github.rest.repos.getContent({ owner, repo, path });
                const sha = data.sha;
                const content = Buffer.from(data.content, 'base64').toString('utf8');
                return { sha, content };
              }catch(e){ return { sha: null, content: '' }; }
            }

            const blogsPath = 'assets/data/blogs.json';
            const current = await getFile(blogsPath);
            let list = [];
            try { list = JSON.parse(current.content || '[]'); } catch(e){ list = []; }

            // Prepend new post; ensure unique by slug
            list = list.filter(x => x.slug !== post.slug);
            list.unshift(post);

            const newBlogs = Buffer.from(JSON.stringify(list, null, 2)).toString('base64');
            await github.rest.repos.createOrUpdateFileContents({
              owner, repo, path: blogsPath,
              message: `chore(blog): publish '${post.title}' via issue #${issue.number}`,
              content: newBlogs,
              sha: current.sha || undefined,
              branch: 'main',
            });

            // Write full post content
            const postPath = `assets/data/posts/${slug}.json`;
            const postData = {
              ...post,
              body,
            };
            const existingPost = await getFile(postPath);
            await github.rest.repos.createOrUpdateFileContents({
              owner, repo, path: postPath,
              message: `chore(blog): add post data for '${post.title}'`,
              content: Buffer.from(JSON.stringify(postData, null, 2)).toString('base64'),
              sha: existingPost.sha || undefined,
              branch: 'main',
            });

            // Comment back with the slug and preview link
            const url = `https://${owner}.github.io/${repo}/post.html?slug=${encodeURIComponent(slug)}`;
            await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body: `Published: ${url}` });
